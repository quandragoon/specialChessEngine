I. Profiling after Beta I submitted (obtained with a single “go depth 6” input):
Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total    
 time   seconds   seconds    calls  ms/call  ms/call  name    
 38.24      0.26     0.26   334307     0.00     0.00  eval
 14.71      0.36     0.10   668614     0.00     0.00  mobility
 14.71      0.46     0.10     2870     0.03     0.24  scout_search_reference
 10.30      0.53     0.07  2642717     0.00     0.00  make_move
  7.35      0.58     0.05   101629     0.00     0.00  generate_all
  5.88      0.62     0.04   668614     0.00     0.00  h_squares_attackable
  4.41      0.65     0.03   356411     0.00     0.00  tt_hashtable_get
  2.21      0.67     0.02 10697824     0.00     0.00  dir_of
  1.47      0.68     0.01  6246198     0.00     0.00  ptype_mv_of
  0.74      0.68     0.01  9850516     0.00     0.00  beam_of
  0.00      0.68     0.00  9768148     0.00     0.00  ori_of
  0.00      0.68     0.00  6246198     0.00     0.00  from_square
  0.00      0.68     0.00  6246198     0.00     0.00  rot_of
  0.00      0.68     0.00  6246198     0.00     0.00  to_square
  0.00      0.68     0.00  2674456     0.00     0.00  opp_color
  0.00      0.68     0.00  1516108     0.00     0.00  reflect_of
  0.00      0.68     0.00   477312     0.00     0.00  color_to_move_of
  0.00      0.68     0.00   101627     0.00     0.00  tt_adjust_score_for_hashtable
  0.00      0.68     0.00   101627     0.00     0.00  tt_hashtable_put
  0.00      0.68     0.00    31270     0.00     0.00  tt_is_usable
  0.00      0.68     0.00    22104     0.00     0.00  tt_adjust_score_from_hashtable
  0.00      0.68     0.00     9267     0.00     0.00  tt_move_of

-----------------------------------------------------------------------------------------------------
Changes made for Beta II:

A. James:

1. Combined the mobility and h_squares_attackable functions. Now, as the combined function computes the laser path for a particular king A, it determines the mobility for the opposing king B and the h_squares_attackable for B. This means that eval() now only needs to compute each king’s laser path one, as opposed to twice in the old code.

Profiling data on the change (comparison for a single execution of “go depth 7”):

pre-change:
real  0m1.956s
user  0m1.948s
sys 0m0.004s

post-change:
real  0m1.877s
user  0m1.864s
sys 0m0.008s

2. Added lazy sorting of the move list to scout_search_student(). Previously, we were moving all entries in the list with sort keys of 0 to the end of the list in linear time and then performing a complete insertion sort on the remainder of the elements. Now, instead of performing this insertion sort, in each iteration of the loop over the moves, we find the as of yet unconsidered element with largest sort key in linear time (making sure to search only till the last non-zero element, since we have already moved all the zero-key elements to the end of the list) and move it to the current position in the move list. We are essentially performing a lazy selection sort of the move list. Since we expect to find the PV within a few iterations of the loop in most cases, this approach should require only a few linear scans of the non-zero elements in the list and is therefore much faster than the insertion sort method, which took time proportional to the square of the number of non-zero moves.

Profiling data on the change (comparison for a single execution of “go depth 7”):

pre-change:
real  0m1.849s
user  0m1.836s
sys 0m0.008s

post-change:
real  0m1.514s
user  0m1.496s
sys 0m0.012s

**************************************************
B. Varun:

1. Added rank and file count to keep track of how many pieces were on each rank/file at any time. These arrays are part of the position_t struct. Used this measure to short circuit fire() function in move_gen.c; if there is only one piece on a particular rank/file and the beam is moving along that rank/file, it implies that the beam is now going to go off the board. We can return out of the function at that point given that we have saved the number of pieces on each rank/file.

real  0m2.570s
user  0m1.564s
sys 0m0.012s

real  0m2.016s
user  0m1.456s
sys 0m0.012s


2. Inlined more hot functions after studying other bot codes and seeing that we could inline more than the few functions that had been inlined for Beta I (in move_gen.c to move_gen.h).

**************************************************
C. Deepak:

1. Remove performance bugs in previous optimizations written for the beta1 submission, this included inlining of the myrand() function as well as fixing some logical bugs in the optimizations made to the mobility function

The benchmark below was computed using 60 games using the setting “fis = 60 0.2”
Rank Name        Elo    +    - games score oppo. draws
   1 reference     0   87   93    60   44%     0    2%
   2 current       0   93   87    60   56%     0    2%


2. Added a piece-position mapping for pawns. This helps to save on iterating through the entire board to find pawns, and saves time predominantly in two places - the eval function and the make_move function.

The benchmark below was computed using 60 games using the setting “fis = 60 0.2”
Rank Name        Elo    +    - games score oppo. draws
   1 reference     0   85   97    60   38%     0    3%
   2 current       0   97   85    60   62%     0    3%


3*. Also worked a little bit on the bit hack solution to fire, but for some reason this is still not producing a speedup. We will revisit this again before our final submission.

**************************************************
D. Quan:

1. Instead of computing square and color inside kface and kaggressive, I used the square computed in the new piece-position mapping and passed it to the functions.

before:
real   1m18.752s
user   1m18.889s
sys    0m0.076s

after:
real   1m18.138s
user   1m18.081s
sys    0m0.056s

2. Even with the new piece-position mapping, we still have some double loop with file and rank. For example, in compute_zob_key, instead of calling square_of in the inner loop, I computed the square incrementally to reduce the amount of computations. This is possible because in the formula to compute square, file and rank are separable, so the file part remains unchanged for each file value (outer loop).

before:
real   1m18.138s
user   1m18.081s
sys    0m0.056s

after:
real   1m17.437s
user   1m17.389s
sys    0m0.048s

3. Combining kface and kaggressive. They both use the same delta_fil and delta_rnk. This also saves a call to opp_color

before:
real   1m17.437s
user   1m17.389s
sys    0m0.048s

after:
real   1m16.086s
user  1m16.041s
sys   0m0.044s

4. I changed the logic in kaggressive from: 4 “else if” blocks to 2 levels of “if else” in order to save the number of comparisons. However, this slowed the code down by a factor of 2, probably because the 4 “else if” blocks are better for branch prediction.

-----------------------------------------------------------------------------------------------------
III. Planned optimizations:

Profiling after Beta II submitted (obtained with a single “go depth 7” input):
Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total    
 time   seconds   seconds    calls   s/call   s/call  name    
 37.43      0.58     0.58  9681064     0.00     0.00  make_move
 29.36      1.04     0.46     5084     0.00     0.00  scout_search_student
 19.36      1.34     0.30  1270292     0.00     0.00  eval
  7.74      1.46     0.12   460861     0.00     0.00  generate_all
  2.58      1.50     0.04  1398517     0.00     0.00  tt_hashtable_get
  1.94      1.53     0.03   183438     0.00     0.00  update_best_move_history
  0.97      1.54     0.02 33430785     0.00     0.00  ori_of
  0.32      1.55     0.01       12     0.00     0.00  set_ind
  0.00      1.55     0.00  1914682     0.00     0.00  color_to_move_of
  0.00      1.55     0.00   460859     0.00     0.00  tt_adjust_score_for_hashtable
  0.00      1.55     0.00   460859     0.00     0.00  tt_hashtable_put
  0.00      1.55     0.00   165347     0.00     0.00  tt_is_usable
  0.00      1.55     0.00   128225     0.00     0.00  tt_adjust_score_from_hashtable
  0.00      1.55     0.00    37294     0.00     0.00  tt_move_of
  0.00      1.55     0.00     3268     0.00     0.00  myrand

Our plan for the final submission is to first work on any changes that we started for Beta II but were unable to completely finish (the changes listed with a ‘*’ in the previous section). Next, we plan to carefully examine some of the hottest functions listed in the above profiling output to see if we can find any additional optimizations. We will look at functions in order of their appearance in the above profiling output.

Finally, we will spend more time trying to get parallelization working. After we saw that the reference code slowed down a bit when the PARALLEL flag was set, we decided that working on parallelization wasn’t worth our time for this beta submission, but it likely will be for the final.

-----------------------------------------------------------------------------------------------------
IV. Planned breakdown of work:

Each team member will work on his respective incomplete Beta II changes (i.e. the changes with a ‘*’ in his section).

With respect the hot functions in the profiling output in the previous section, James will focus on changes to move_gen.c, Deepak on changes to search.c, and Quan and Varun on changes to tt.c and eval.c.

Each of us will independently examine the existing parallelization strategy in search.c and identify where improvements can be made. We will meet afterwards to discuss our findings and decide how to combine any successful changes we made.
